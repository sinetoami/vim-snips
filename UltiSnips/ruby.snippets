priority 1

global !p

def camelize_basename(snip):
		return ''.join(x for x in snip.basename.title().split('_'))

def complete(t, opts):
		if t:
				opts = [ m[len(t):] for m in opts if m.startswith(t) ]
		if len(opts) == 1:
				return opts[0]
		return ' | '.join(opts)

def write_instance_vars(arglist, snip, is_clas):
	args = str(arglist).split(',')
	for arg in args:
		name = arg.strip().replace(':', ' ').split(' ', 1)[0]
		if name and is_class:
			snip += '    @{} = {}'.format(name, name)
		elif name and is_class == False:
			snip += '  @{} = {}'.format(name, name)
		else:
			snip += ''

endglobal

########################
## RUBY SNIPPETS
########################
snippet debug "binding.pry"
require 'pry'; binding.pry
endsnippet

#
# head snippets
#
snippet #! "!/usr/bin/env ruby"
#!/usr/bin/env ruby
${0}
endsnippet

snippet frozen "# frozen_string_literal: true"
# frozen_string_literal: true
${0}
endsnippet

snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# $1`!p snip.rv=complete(t[1], ['enconding: utf-8', 'coding: utf-8', '-*- codign: utf-8 -*-'])`
${0}
endsnippet

snippet req "require"
require '${0:file_path}'
endsnippet

snippet reqr "require_relative"
require_relative '${0:file_path}'
endsnippet

#
# if statement
#
snippet if "if ... end"
if ${1:condition}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet ifl "[do something] if [condition] "
${1:${VISUAL}} if ${0:condition}
endsnippet

snippet ife "if ... end"
if ${1:condition}
	${2:${VISUAL:# do something}}
else
	${0}
end
endsnippet

snippet elsif "elsif [condition]"
elsif ${1:condition}
	${0:${VISUAL:# do something}}
endsnippet

snippet unless "unless ... end"
unless ${1:condition}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet unlessl "[do something] unless [condition]"
${1:${VISUAL}} unless ${0:condition}
endsnippet

#
# case switch
#
snippet case "case ... when ... end"
case ${1:variable}
when ${2:expression}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet casee "case ... when ... else ... end"
case ${1:variable}
when ${2:expression}
	${3:${VISUAL:# do something}}
else
	${0}
end
endsnippet

snippet when "when [expression] ..."
when ${1:expression}
	${0:${VISUAL:# do something}}
endsnippet

#
# do/end block
#
snippet do "do ... end"
do
	${0:${VISUAL:# do something}}
end
endsnippet

snippet doa "do |args| ... end"
do |${1:args}|
	${0:${VISUAL:# do something}}
end
endsnippet

#
# line block
#
snippet blk "{ ... }"
{ ${0:${VISUAL}} }
endsnippet

snippet blka "{ |arg| ... }"
{ |${1:arg}| ${0:${VISUAL}} }
endsnippet

#
# loop blocks
#
snippet while "while ... end"
while ${1:condition}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet forin "for .. in .. end"
for ${1:item} in ${2:data}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet upto "<from>.upto(<to>) do |item| ... end"
${1:from}.upto(${2:to}) do |${3:item}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet downto "<from>.downto(<to>) do |item| ... end"
${1:from}.downto(${2:to}) do |${3:item}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet step "<from>.step(<to>, <step>) do |item| ... end"
${1:from}.step(${2:to}, ${3:step}) do |${4:item}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.times" ".times { |i| ... }" r
`!p snip.rv=match.group(1)`.times { |${1:i}| ${0:${VISUAL}} }
endsnippet

#
# each blocks
#
# snippet .each ".each..." w
# each$1`!p snip.rv=complete(t(1), ['d', 'l', 'keyd', 'keyl'])`
# endsnippet

snippet foreach "(<from>..<to>).each { |i| ... }"
(${1:from}..${2:to}).each { |${3:i}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.eachd" ".each do |var| ... end" r
`!p snip.rv=match.group(1)`.each do |${1:var}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.eachl" ".each { |var| ... }" r
`!p snip.rv=match.group(1)`.each { |${1:var}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?k(ey)?d" ".each_key do |key| ... end" r
`!p snip.rv=match.group(1)`.each_key do |${1:key}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?k(ey)?l" ".each_key { |key| ... }" r
`!p snip.rv=match.group(1)`.each_key { |${1:key}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?val(ue)?d" ".each_value do |value| ... end" r
`!p snip.rv=match.group(1)`.each_value do |${1:value}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?val(ue)?l" ".each_value { |value| ... }" r
`!p snip.rv=match.group(1)`.each_value { |${1:value}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?s(lice)?d" ".each_slice(n) do |slice| ... end" r
`!p snip.rv=match.group(1)`.each_slice(${1:n}) do |${2:slice}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?s(lice)?l" ".each_slice(n) { |slice| ... }" r
`!p snip.rv=match.group(1)`.each_slice(${1:n}) { |${2:slice}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?by(te)?d" ".each_byte do |byte| ... end" r
`!p snip.rv=match.group(1)`.each_byte do |${1:byte}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?by(te)?l" ".each_byte { |byte| ... }" r
`!p snip.rv=match.group(1)`.each_byte { |${1:byte}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?ch(ar)?d" ".each_char do |char| ... end" r
`!p snip.rv=match.group(1)`.each_char do |${1:char}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?ch(ar)?l" ".each_char { |char| ... }" r
`!p snip.rv=match.group(1)`.each_char { |${1:char}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?in(dex)?d" ".each_index do |index| ... end" r
`!p snip.rv=match.group(1)`.each_index do |${1:index}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?in(dex)?l" ".each_index { |index| ... }" r
`!p snip.rv=match.group(1)`.each_index { |${1:index}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?li(ne)?d" ".each_line do |line| ... end" r
`!p snip.rv=match.group(1)`.each_line do |${1:line}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?li(ne)?l" ".each_line { |line| ... }" r
`!p snip.rv=match.group(1)`.each_line { |${1:line}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.each_?wi(th)?d" ".each_with_index do |index| ... end" r
`!p snip.rv=match.group(1)`.each_with_index do |${1:index}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?wi(th)?l" ".each_index { |index| ... }" r
`!p snip.rv=match.group(1)`.each_with_index { |${1:index}| ${0:${VISUAL}} }
endsnippet

snippet "(\s+)\.each_?pa(ir)?d" ".each_pair do |key, value| ... end" r
`!p snip.rv=match.group(1)`.each_pair do |${1:key}, ${2:value}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.each_?pa(ir)?l" ".each_pair { |key, value| ... }" r
`!p snip.rv=match.group(1)`.each_pair { |${1:key}, ${2:value}| ${0:${VISUAL}} }
endsnippet

#
# String blocks
#
snippet "(\S+)\.sub" ".sub(/pattern/, replace )" r
`!p snip.rv=match.group(1)`.sub(${1:/${2:pattern}/}, ${0:replacement})
endsnippet

snippet "(\S+)\.subb" ".sub(/pattern/) { |match| ... } " r
`!p snip.rv=match.group(1)`.sub(${1:/${2:pattern}/}) { |${3:match}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.gsub" ".sub(/pattern/, replace )" r
`!p snip.rv=match.group(1)`.sub(${1:/${2:pattern}/}, ${0:replacement})
endsnippet

snippet "(\S+)\.gsubb" ".sub(/pattern/) { |match| ... } " r
`!p snip.rv=match.group(1)`.sub(${1:/${2:pattern}/}) { |${3:match}| ${0:${VISUAL}} }
endsnippet

#
# Array blocks
#
snippet "(\S+)\.sortd" ".sort do |a,b| ... end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.sortl" ".sort { |a,b| ... }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.sortbyd" ".sort_by do |obg| ... end" r
`!p snip.rv=match.group(1)`.sort_by do |${1:obj}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.sortbyl" ".sort_by { |obj| ... }" r
`!p snip.rv=match.group(1)`.sort_by { |${1:obj}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.sel(ect)?d" ".select do |item| ... end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.sel(ect)?l" ".select { |item| ... }" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.rej(ect)?d" ".reject do key,value| ... end" r
`!p snip.rv=match.group(1)`.reject do |${1:key},${2:value}|
${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.rej(ect)?l" ".reject { |key,value| ... }" r
`!p snip.rv=match.group(1)`.reject { |${1:key},${2:value}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.mapd" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:element}|
	${0:${VISUAL:# do something}}
end
endsnippet

snippet "(\S+)\.mapl" ".map { |element| ... }" r
`!p snip.rv=match.group(1)`.map { |${1:element}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.maps" ".map(&:method)" r
`!p snip.rv=match.group(1)`.map(&:${0:method_name})
endsnippet

snippet "(\S+)\.in(dex)?l" ".index { |item| ... }" r
`!p snip.rv=match.group(1)`.index { |${1:item}| ${0:${VISUAL}} }
endsnippet

snippet "(\S+)\.in(dex)?d" ".index do |item| ... end" r
`!p snip.rv=match.group(1)`.index do |${1:item}|
	${0:${VISUAL:# do something}}
end
endsnippet

#
# class
#
snippet attr "attr_reader"
attr_reader :${0:${VISUAL:attr_name}}
endsnippet

snippet attw "attr_write"
attr_writer :${0:${VISUAL:attr_name}}
endsnippet

snippet attac "attr_accessor"
attr_accessor :${0:${VISUAL:attr_name}}
endsnippet

snippet inc "include"
include ${0:${VISUAL:IncludeClass}}
endsnippet

snippet priv "private" m
private

	${0:${VISUAL}}
endsnippet

snippet prot "protected" m
private

	${0:${VISUAL}}
endsnippet

snippet Enum "include Enumerable ..."
include Enumerable

def each(&block)
	${0:${VISUAL:# do something}}
end
endsnippet

snippet Comp "include Comparable ..."
include Comparable

def <=>(other)
	${0:${VISUAL:# do something}}
end
endsnippet

snippet cla "class ... end"
class ${1:`!p snip.rv = camelize_basename(snip)`}
	${0:${VISUAL:# class body}}
end
endsnippet

snippet clai "class ... initialize(args) ... end"
class ${2:`!p snip.rv = camelize_basename(snip)`}
	def initialize($1)`!p write_instance_vars(t[1], snip, True)`
	end

	${0:${VISUAL:# class body}}
end
endsnippet

snippet cla< "class ... < ParentClass ... end "
class ${1:`!p snip.rv = camelize_basename(snip)`} < ${2:ParentClass}
	${0:${VISUAL:# class body}}
end
endsnippet

snippet clai< "class ... initialize(args) ... end"
class ${2:`!p snip.rv = camelize_basename(snip)`} < ${3:ParentClass}
	def initialize($1)`!p write_instance_vars(t[1], snip, True)`
	end

	${0:${VISUAL:# class body}}
end
endsnippet

snippet defi "def initialize(args) ... end"
def initialize($1)`!p write_instance_vars(t[1], snip, False)`
end

${0}
endsnippet

snippet def "def ... end"
def ${1:function_name}${2:(${3:*args})}
	${0:${VISUAL:# do something}}
end
endsnippet

snippet selfdef "self.def ... end"
self.def ${1:function_name}${2:(${3:*args})}
	${0:${VISUAL:# do something}}
end
endsnippet

#
# module
#
snippet modu "module ... end"
module ${1:`!p snip.rv = camelize_basename(snip)`}
	${0:${VISUAL:# module body}}
end
endsnippet
